{"version":3,"sources":["../../src/node.js"],"names":[],"mappings":";;;;;kBAgBwB,W;;AAhBxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AACA,IAAM,SAAS,gCAAW,iBAAX,CAAf;;;AAGA,IAAM,SAAS,CACX,EAAE,MAAM,MAAR,EAAgB,QAAQ,gBAAxB,EAA0C,kBAAkB,EAA5D,EADW,EAEX,EAAE,MAAM,SAAR,EAAmB,QAAQ,mBAA3B,EAAgD,kBAAkB,EAAlE,EAFW,EAGX,EAAE,MAAM,QAAR,EAAkB,QAAQ,kBAA1B,EAA8C,kBAAkB,EAAhE,EAHW,E;AAIX,EAAE,MAAM,UAAR,EAAoB,QAAQ,oBAA5B,EAAkD,kBAAkB,EAApE,EAJW,CAAf;;;;;;;AAQe,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACtC,WAAO,UAAC,GAAD,EAAS;AACZ,YAAI,OAAJ,CAAY,MAAZ,G;;;;+BAAqB,UAAU,gBAAV,EAA4B,IAA5B,EAAkC;AAAA;;AACnD,mBAAO,KAAP,CAAa,aAAb,EAA4B,EAAE,UAAF,EAA5B;;AAEA,gBAAI,iBAAiB,OAAjB,IAA4B,iBAAiB,MAAjD,EAAyD;AAAA,iB;;oBAAA;AACrD,wBAAM,MAAM,mBAAZ;AACA,wBAAI,iBAAiB,OAArB,EAA8B;AAC1B,+BAAO,IAAP,CAAY,iBAAiB,OAA7B,EACK,OADL,CACa;AAAA,mCAAO,IAAI,UAAJ,CAAe,GAAf,EAAoB,iBAAiB,OAAjB,CAAyB,GAAzB,CAApB,CAAP;AAAA,yBADb;AAEH;;AAED,wBAAI,iBAAiB,MAArB,EAA6B;AACzB,+BAAO,IAAP,CAAY,iBAAiB,MAA7B,EACK,OADL,CACa;AAAA,mCAAO,IAAI,QAAJ,CAAa,GAAb,EAAkB,iBAAiB,MAAjB,CAAwB,GAAxB,CAAlB,CAAP;AAAA,yBADb;AAEH;;AAED,0BAAK,GAAL,GAAW,GAAX;AAZqD;AAaxD;;AAED,iBAAK,IAAL,GAAY,oBAAO;AACf,0BAAU;AACN,6BAAS,IADH;AAEN,sDAFM;AAGN,wBAAI,UAAJ,GAAiB;;AAEb,4BAAM,KAAK,KAAK,OAAL,CAAa,GAAb,CAAiB,OAAjB,CAAyB,YAAzB,CAAX;;AAFa;AAAA;AAAA;;AAAA;AAIb,iDAAkB,MAAlB,8HAA0B;AAAA,oCAAjB,KAAiB;;AACtB,oCAAM,MAAM,MAAM,MAAN,CAAa,IAAb,CAAkB,EAAlB,CAAZ;AACA,oCAAI,OAAO,IAAI,CAAJ,KAAU,MAAM,gBAA3B,EAA6C;AACzC,2CAAO,iBAAP;AACH;AACJ;AATY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUb,+BAAO,KAAP;AACH;AAdK,iBADK;AAiBf,yBAAS,IAjBM;AAkBf,sBAAM,iBAAiB,IAlBR;AAmBf,sBAAM,KAAK,GAAL,GAAW,SAAX,GAAuB,IAnBd;AAoBf,6BAAa,KAAK,GAAL,GAAW;AAAA,2BAAM,MAAK,GAAL,CAAS,YAAT,EAAN;AAAA,iBAAX,GAA2C;AAAA,2BAAM,IAAN;AAAA,iBApBzC;AAqBf,0BArBe;AAsBf,qBAAK,KAAK,GAAL;AAtBU,aAAP,CAAZ;AAwBH,SA1CD;AA2CH,KA5CD;AA6CH","file":"node.js","sourcesContent":["import render from 'fody';\nimport DefaultApp from 'fody-app';\nimport AltApp from 'fody-alt-app';\nimport Logger from 'nightingale-logger';\nimport Alt from 'alt';\nconst logger = new Logger('alp.react-redux');\n\n// https://www.npmjs.com/package/babel-preset-modern-browsers\nconst agents = [\n    { name: 'Edge', regexp: /edge\\/([\\d]+)/i, modernMinVersion: 13 },\n    { name: 'Firefox', regexp: /firefox\\/([\\d]+)/i, modernMinVersion: 45 },\n    { name: 'Chrome', regexp: /chrome\\/([\\d]+)/i, modernMinVersion: 41 }, // also works for opera.\n    { name: 'Chromium', regexp: /chromium\\/([\\d]+)/i, modernMinVersion: 41 },\n    // { name: 'Safari', regexp: /safari.*version\\/([\\d\\w\\.\\-]+)/i, modernMinVersion: 10 },\n];\n\nexport default function alpReactAlt(Html) {\n    return (app) => {\n        app.context.render = function (moduleDescriptor, data) {\n            logger.debug('render view', { data });\n\n            if (moduleDescriptor.actions || moduleDescriptor.stores) {\n                const alt = new Alt();\n                if (moduleDescriptor.actions) {\n                    Object.keys(moduleDescriptor.actions)\n                        .forEach(key => alt.addActions(key, moduleDescriptor.actions[key]));\n                }\n\n                if (moduleDescriptor.stores) {\n                    Object.keys(moduleDescriptor.stores)\n                        .forEach(key => alt.addStore(key, moduleDescriptor.stores[key]));\n                }\n\n                this.alt = alt;\n            }\n\n            this.body = render({\n                htmlData: {\n                    context: this,\n                    moduleDescriptor,\n                    get scriptName() {\n                        // TODO create alp-useragent with getter in context\n                        const ua = this.context.req.headers['user-agent'];\n\n                        for (let agent of agents) {\n                            const res = agent.regexp.exec(ua);\n                            if (res && res[1] >= agent.modernMinVersion) {\n                                return 'modern-browsers';\n                            }\n                        }\n                        return 'es5';\n                    },\n                },\n                context: this,\n                View: moduleDescriptor.View,\n                data: this.alt ? undefined : data,\n                initialData: this.alt ? () => this.alt.takeSnapshot() : () => null,\n                Html,\n                App: this.alt ? AltApp : DefaultApp,\n            });\n        };\n    };\n}\n"]}